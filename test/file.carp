(load "file.carp")
(load "Test.carp")

(use-all File Test)

(defn main []
  (with-test test
    (assert-equal test
                  "hi"
                  &(let-do [f (File.open "example")
                            s @""]
                    (File.write &f "hi")
                    (set! s (File.read-all &f))
                    (File.close f)
                    s)
                  "reading and writing works"
    )
    (assert-true test
                 (let [f (File.open "example")]
                   (File.writable? &f))
                  "writable? works I"
    )
    (assert-false test
                  (let [f (File.open-with "example" "r")]
                    (File.writable? &f))
                   "writable? works II"
    )
    (assert-true test
                 (let [f (File.open "example")]
                   (File.readable? &f))
                  "readable? works I"
    )
    (assert-false test
                  (let [f (File.open-with "example" "w")]
                    (File.readable? &f))
                   "readable? works II"
    )
    (assert-true test
                 (let [f (File.open-with "example" "rb")]
                   (File.binary-mode? &f))
                  "binary-mode? works I"
    )
    (assert-false test
                  (let [f (File.open "example")]
                    (File.binary-mode? &f))
                   "binary-mode? works II"
    )
    (let-do [f (File.open "example")]
      (File.remove &f)
      @test)
  )
)
